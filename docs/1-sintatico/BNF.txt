<programa> ::= <declaracoes_constante> <definicoes_tipo> <definicoes_struct> <declaracoes_var> <declaracoes_func> program begin <declaracoes_var> <comandos> end program

<declaracoes_constante> ::= <declaracao_constante>
						| <declaracao_constante> <declaracoes_constante>

<declaracao_constante> ::= const <identificador> = <constante> ;
						| epsilon

<identificador> ::= <letra> | <letra><letra_dig>

<constante> ::= <numero>
			| <booleano>
			| <char>

<numero> ::= <inteiro>
			| <inteiro>.<inteiro>
			| .<inteiro>

<booleano> ::= true | false

<char> ::= '<letra_dig>' | '\<letra_dig>'

<definicoes_tipo> ::= <definicao_tipo>
					| <definicao_tipo> <definicoes_tipo>

<definicao_tipo> ::= typedef <identificador> <tipo> ;
					| epsilon

<tipo> ::= bool | int | char | float | <identificador>

<definicoes_struct> ::= <definicao_struct>
					| <definicao_struct> <definicoes_struct>

<definicao_struct> ::= struct <identificador> begin <declaracao_var> <declaracoes_var> end struct
					| epsilon

<declaracoes_var> ::= <declaracao_var>
					| <declaracao_var> <declaracoes_var>

<declaracao_var> ::= <tipo> <vars> ;
					| epsilon

<vars> ::= <declaracao_array>
		| <declaracao_array>, <vars>

<declaracao_array> ::= <identificador>
					| <declaracao_array>[<inteiro>]

<inteiro> ::= <digito>
			| <digito><inteiro>

<declaracoes_func> ::= <declaracao_func>
					| <declaracao_func> <declaracoes_func>

<declaracao_func> ::= function <tipo_funcao> <identificador> (<declaracoes_parametro>) begin <declaracoes_var> <comandos> end function

<tipo_funcao> ::= void | <tipo>

<declaracoes_parametro> ::= <declaracao_parametro>
						| epsilon

<declaracao_parametro> ::= <tipo> <declaracao_array>
						| <tipo> byref <declaracao_array>
						| <tipo> <declaracao_array>, <declaracao_parametro>
						| <tipo> byref <declaracao_array>, <declaracao_parametro>

<comandos> ::= <comando> <comandos>
			| epsilon

<comando> ::= <comando_atribuicao>
			| <comando_condicional>
			| <comando_iterativo>
			| <comando_entrada>
			| <comando_saida>
			| <comando_retorno>

<comando_atribuicao> ::= <var> <operador_atribuicao> <expressao>;
						| <expressao>;

<operador_atribuicao> ::= =
						| +=
						| -=
						| *=
						| /=

<var> ::= <array>
		| <array>.<var>

<array> ::= <identificador>
		| <identificador>[<expressao>]

<expressao> ::= <ou>

<ou> ::= <e>
		| <e> or <ou>

<e> ::= <comparacao>
	| <e> and <comparacao>

<comparacao_booleana> ::= <soma>
						| <soma> <operador_comparacao> <soma>

<operador_comparacao> ::= ==
						| !=
						| <
						| >
						| <=
						| >=

<soma> ::= <multiplicacao>
		| <multiplicacao> + <soma>
		| <multiplicacao> - <soma>

<multiplicacao> ::= <potenciacao>
				| <potenciacao> * <multiplicacao>
				| <potenciacao> / <multiplicacao>

<potenciacao> ::= <operacao_unitaria>
				| <operacao_unitaria> ^ <potenciacao>

<operacao_unitaria> ::= <particula>
					| - <particula>
					| ! <particula>

<particula> ::= (expressao_aritmerica)
			| <constante>
			| <var>
			| <chamada_funcao>

<chamada_funcao> ::= <identificador>(<parametros>)

<parametros> ::= <parametro>
				| epsilon

<parametro> ::= <expressao>
			| <expressao>, <parametro>

<comando_condicional> ::= if(<expressao>) then <comandos> end if
						| if(<expressao>) then <comandos> else <comandos> end if

<comando_iterativo> ::= while(<expressao>) do <comandos> end while

<comando_entrada> ::= scan <lista_enderecos>;

<lista_enderecos> ::= <var>
					| <var>, <lista_enderecos>

<comando_saida> ::= print <parametro>;


<comando_retorno> ::= return <expressao>;
					| epsilon

<letra> ::= _ | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

<digito> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<letra_dig> ::= <letra> 
			| <digito> 
			| <letra><letra_dig>
			| <dig><letra_dig>