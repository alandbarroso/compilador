<programa> ::= <declaracoes> program begin <declaracoes-var> <comandos> end program

<declaracoes> ::= <declaracoes-var> <declaracoes-func>

<declaracoes-var> ::= <declaracao-var>
					| <declaracao-var> <declaracoes-var>

<declaracao-var> ::= <tipo> <vars>;
					| epsilon

<tipo> ::= bool | int | char | float

<vars> ::= <declaracao-ponteiro>
		| <declaracao-ponteiro>, <vars>

<declaracao-ponteiro> ::= <declaracao-array>
						| *<declaracao-ponteiro>

<declaracao-array> ::= <identificador>
					| <declaracao-array>[<inteiro>]

<identificador> ::= <letra> | <letra><letra-dig>

<inteiro> ::= <digito>
			| <digito><inteiro>

<declaracoes-func> ::= <declaracao-func>
					| <declaracao-func> <declaracoes-func>

<declaracao-func> ::= function <tipo> <identificador> (<declaracoes-parametro>) begin <declaracoes-var> <comandos_funcao> end function

<declaracoes-parametro> ::= <declaracao-parametro>
						| epsilon

<declaracao-parametro> ::= <tipo> <declaracao-ponteiro>
						| <tipo> <declaracao-ponteiro>, <declaracao-parametro>

<comandos> ::= <comando> <comandos>
			| epsilon

<comandos-funcao> ::= <comando> <comandos-funcao>
					| <comando-retorno> <comandos-funcao>
					| epsilon

<comando> ::= <comando-atribuicao>
			| <comando-funcao>
			| <comando-condicional>
			| <comando-iterativo>
			| <comando-entrada>
			| <comando-saida>

<comando-atribuicao> ::= <var> <operador-atribuicao> <expressao>;

<operador-atribuicao> ::= =
						| +=
						| -=
						| *=
						| /=

<var> ::= <ponteiro>
		| <endereco>

<ponteiro> ::= <array>
			| *<ponteiro>

<endereco> ::= &<array>

<array> ::= <identificador>
		| <identificador>[<inteiro>]

<expressao> ::= <expressao-aritmerica>
			| <expressao-booleana>

<expressao-aritmerica> ::= <soma>

<soma> ::= <multiplicacao>
		| <multiplicacao> + <soma>
		| <multiplicacao> - <soma>

<multiplicacao> ::= <potenciacao>
				| <potenciacao> * <multiplicacao>
				| <potenciacao> / <multiplicacao>

<potenciacao> ::= <particula-potenciacao>
				| <potenciacao> ^ <inteiro>

<particula-potenciacao> ::= <particula-aritmetica>
						| -<particula-aritmetica>

<particula-aritmetica> ::= (expressao-aritmerica)
						| <numero>
						| <var>
						| <chamada-funcao>

<numero> ::= <inteiro>
			| <inteiro>.<inteiro>
			| .<inteiro>

<chamada-funcao> ::= <identificador>(<parametros>)

<parametros> ::= <parametro>
				| epsilon

<parametro> ::= <expressao>
			| <expressao>, <parametro>

<expressao-booleana> ::= <ou>

<ou> ::= <e>
		| <e> or <ou>

<e> ::= <comparacao-booleana>
	| <e> and <comparacao-booleana>

<comparacao-booleana> ::= <particula-comparacao>
						| <particula-comparacao> <operador-booleano> <particula-comparacao>

<operador-booleano> ::= ==
					| !=

<particula-comparacao> ::= <particula-booleana>
						| !<particula-booleana>

<particula-booleana> ::= (<expressao-booleana>)
						| <booleano>
						| <comparacao-aritmetica>

<booleano> ::= true | false

<comparacao-aritmetica> ::= <expressao-aritmerica>
						| <expressao-aritmerica> <operador-aritmetico> <expressao-aritmerica>

<operador-aritmetico> ::= <
						| >
						| <=
						| >=

<comando-funcao> ::= <chamada-funcao>;

<comando-condicional> ::= if(<expressao-booleana>) then <comandos> end if
						| if(<expressao-booleana>) then <comandos> else <comandos> end if

<comando-iterativo> ::= while(<expressao-booleana>) do <comandos> end while

<comando-entrada> ::= scan <lista-enderecos>;

<lista-enderecos> ::= <var>
					| <var>, <lista-enderecos>

<comando-saida> ::= print <parametro>;


<comando-retorno> ::= return <expressao>;
					| epsilon

<letra> ::= _ | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

<digito> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<letra-dig> ::= <letra> 
			| <digito> 
			| <letra><letra-dig>
			| <dig><letra-dig>