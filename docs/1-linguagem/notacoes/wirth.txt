programa = {declaracao_constante} {definicao_tipo} {definicao_struct} {declaracao_var} {declaracao_func} "program" "begin" {declaracao_var} {comando} "end" "program".

declaracao_constante = "const" identificador "=" constante ";".

identificador = letra {letra_dig}.

constante = numero | booleano | char.

numero = inteiro | ([inteiro] "." inteiro).

booleano = "true" | "false".

char = "'" (letra_dig | "\" letra_dig) "'".

definicao_tipo = "typedef" identificador tipo ";".

tipo = "bool" | "int" | "char" | "float" | identificador.

definicao_struct = "struct" identificador "begin" declaracao_var {declaracao_var} "end" "struct".

declaracao_var = tipo vars ";".

vars = declaracao_array {"," declaracao_array}.

declaracao_array = identificador {"[" inteiro "]"}.

inteiro = digito {digito}.

declaracao_func = "function" tipo_funcao identificador "(" [declaracoes_parametro] ")" "begin" {declaracao_var} {comando} "end" "function".

tipo_funcao = "void" | tipo.

declaracoes_parametro = declaracao_parametro {"," declaracao_parametro}.

declaracao_parametro = tipo ["byref"] declaracao_array.

comando = comando_atribuicao
		| comando_condicional
		| comando_iterativo
		| comando_entrada
		| comando_saida
		| comando_retorno.

comando_atribuicao = ((var operador_atribuicao expressao) | [expressao]) ";".

operador_atribuicao = "=" | "+=" | "-=" | "*=" | "/=".

var = array {"." array}.

array = identificador {"[" expressao "]"}.

expressao = e {"or" e}.

e = comparacao {"and" comparacao}.

comparacao = soma {operador_comparacao soma}.

operador_comparacao = "==" | "!=" | "<" | ">" | "<=" | ">=".

soma = multiplicacao {("+" | "-") multiplicacao}.

multiplicacao = potenciacao {("*" | "/") potenciacao}.

potenciacao = operacao_unitaria {"^" operacao_unitaria}.

operacao_unitaria = ["!" | "-"] particula.

particula = ("(" expressao ")") | constante | var | chamada_funcao.

chamada_funcao = identificador "(" [parametros] ")".

parametros = expressao {"," expressao}.

comando_condicional = "if" "(" [expressao] ")" "then" {declaracao_var} {comando} ["else" {declaracao_var} {comando}] "end" "if".

comando_iterativo = "while" "(" [expressao] ")" "do" {declaracao_var} {comando} "end" "while".

comando_entrada = "scan" var {"," var} ";".

comando_saida = "print" parametros ";".

comando_retorno = "return" [expressao] ";".

letra = "_" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z".

digito = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9".

letra_dig = (letra | digito) {letra_dig}.